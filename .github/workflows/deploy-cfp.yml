# ---------------------------------------------------------------------------------------
#   Cloudflare Pages ‚Ä∫ Update Website
#   Pushes a new version of the website to Cloudflare
#
#   If editing this workflow, all you need to edit are the INPUT values and the global
#   ENV variables. No need to go any deeper.
#
#  CHANGE:
#    - run-name && name
#    - INPUTS:
#        PROJECT_NAME
#    - ENV:
#        PROJECT_NAME
#        DOMAIN
# ---------------------------------------------------------------------------------------

run-name: "‚òÅÔ∏è CF ‚Ä∫ Deploy ‚Ä∫ KeeWeb.info"
name: "‚òÅÔ∏è CF ‚Ä∫ KeeWeb.info"

# ---------------------------------------------------------------------------------------
#   TRIGGERS
# ---------------------------------------------------------------------------------------

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:

      # ---------------------------------------------------------------------------------------
      #   The default values set for each input should not need to be changed as they are
      #   already set to the correct values.
      # ---------------------------------------------------------------------------------------

      PROJECT_NAME:
        description:  "Project Name"
        required:     true
        default:      'keeweb-site'
        type:         string

      DIRECTORY_BUILD_OUTPUT:
        description:  "Build Output Dir"
        required:     true
        default:      './'
        type:         string

      DIRECTORY_ROOT:
        description:  "Root Dir"
        required:     true
        default:      './'
        type:         string

      WRANGLER_VERSION:
        description:  "Wrangler Version"
        required:     true
        default:      '3'
        type:         string

      BRANCH:
        description:  'Website Branch'
        required:     true
        default:      'master'
        type:         choice
        options:
        - master
        - main
        - develop

# ---------------------------------------------------------------------------------------
#   ENV VARIABLES
#
#   PROJECT_NAME  : This is the project name used in Cloudflare.
#   DOMAIN        : purely cosmetic which displays as the label of some steps
# ---------------------------------------------------------------------------------------

env:
  PROJECT_NAME: ${{ github.event.inputs.PROJECT_NAME || 'keeweb-site' }}
  DOMAIN: 'keeweb.info'

# ---------------------------------------------------------------------------------------
#   JOBS
# ---------------------------------------------------------------------------------------

jobs:

    # ---------------------------------------------------------------------------------------
    #   JOB > PUBLISH
    # ---------------------------------------------------------------------------------------

    job-cfpublish:
        name: >-
          ‚òÅÔ∏è Publish Website
        runs-on: ubuntu-latest
        outputs:
          upload_github: ${{ steps.task_cloudflare_project_create_github.outputs.SUCCESS }}
          upload_assets: ${{ steps.task_cloudflare_project_create_assets.outputs.SUCCESS }}
        permissions:
            contents: read
            deployments: write
            id-token: write
        steps:

          - name: "‚úÖ Start Publish"
            id: task_cfpublish_start
            run: |
              echo "Publishing new version of ${{ env.DOMAIN }} to Cloudflare Pages service"

          # ---------------------------------------------------------------------------------------
          #   Job > Publish > Checkout
          # ---------------------------------------------------------------------------------------

          - name: "‚òëÔ∏è Checkout"
            id: task_cfpublish_checkout
            uses: actions/checkout@v4
            with:
              fetch-depth: 0

          # ---------------------------------------------------------------------------------------
          #   CLOUDFLARE > NODE > SETUP
          # ---------------------------------------------------------------------------------------

          - name: "‚öôÔ∏è Setup ‚Ä∫ Node"
            id: task_cfpublish_node_setup
            uses: actions/setup-node@v4
            with:
              node-version: '20.x'
              scope: '@aetherinox'

          # ---------------------------------------------------------------------------------------
          #   CLOUDFLARE > NODE > INSTALL
          # ---------------------------------------------------------------------------------------

          - name: "üì¶ NPM ‚Ä∫ Install Wrangler"
            id: task_cloudflare_npm_install
            run: |
              npm install -g npm@latest
              npm install --global wrangler
            env:
              NODE_AUTH_TOKEN: ${{ secrets.SELF_TOKEN_CL }}

          # ---------------------------------------------------------------------------------------
          #   CLOUDFLARE > CHECK PROJECT
          #
          #   this step checks to see if your project already exists on cloudflare
          # ---------------------------------------------------------------------------------------

          - name: "‚òÅÔ∏è CF ‚Ä∫ Check Project"
            id: task_cloudflare_project_check
            shell: bash
            run: |
              check=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/pages/projects/${{ inputs.PROJECT_NAME || env.PROJECT_NAME }}" \
                -H "Authorization: Bearer ${{ secrets.CF_TOKEN }}" \
                -H "Content-Type:application/json" | jq -r '.success')
              echo "SUCCESS=$check" >> $GITHUB_OUTPUT

          # ---------------------------------------------------------------------------------------
          #   CLOUDFLARE > CREATE PROJECT (LINKED TO GITHUB)
          #
          #   This step will only success if you've already linked your Github account to cloudflare.
          #   if you attempt to push this deployment to any github repo that is not linked to 
          #   cloudflare; the step will fail, and then execute step 
          #   task_cloudflare_project_create_assets
          # ---------------------------------------------------------------------------------------

          - name: "‚òÅÔ∏è CF ‚Ä∫ Create Project ‚Ä∫ Linked Github (if nonexistent)"
            id: task_cloudflare_project_create_github
            shell: bash
            if: |
              ${{ steps.task_cloudflare_project_check.outputs.SUCCESS != 'true' }}
            run: |
              check=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/pages/projects" \
                -H "Authorization: Bearer ${{ secrets.CF_TOKEN }}" \
                -H "Content-Type:application/json" \
                -d '{"name": "${{ inputs.PROJECT_NAME || env.PROJECT_NAME }}", "production_branch": "${{ inputs.BRANCH || 'master' }}", "source": {"type": "github", "config": {"owner": "${{ github.repository_owner }}", "repo_name": "${{ github.event.repository.name }}"}}}' | jq -r '.success')
              echo "SUCCESS=$check" >> $GITHUB_OUTPUT
              echo "Mode (Link Github): $check"

          # ---------------------------------------------------------------------------------------
          #   CLOUDFLARE > CREATE PROJECT
          #
          #   this step should execute only if the previous step failed.
          # ---------------------------------------------------------------------------------------

          - name: "‚òÅÔ∏è CF ‚Ä∫ Create Project ‚Ä∫ Upload Assets (if nonexistent)"
            id: task_cloudflare_project_create_assets
            shell: bash
            if: |
              steps.task_cloudflare_project_check.outputs.SUCCESS != 'true' && ( ${{ steps.task_cloudflare_project_create_github.outputs.SUCCESS == 'false' || failure()}} )
            run: |
              check=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/pages/projects" \
                -H "Authorization: Bearer ${{ secrets.CF_TOKEN }}" \
                -H "Content-Type:application/json" \
                -d '{"name":"${{ inputs.PROJECT_NAME || env.PROJECT_NAME }}", "production_branch":"${{ inputs.BRANCH || 'master' }}"}' | jq -r '.success')
              echo "SUCCESS=$check" >> $GITHUB_OUTPUT
              echo "Mode (Upload Assets): $check"

          # ---------------------------------------------------------------------------------------
          #   CLOUDFLARE > CREATE > SUMMARY
          #
          #   outlines which method was used to create the project
          # ---------------------------------------------------------------------------------------

          - name: "‚òÅÔ∏è CF ‚Ä∫ Create Project ‚Ä∫ Summary"
            id: task_cloudflare_project_summary
            shell: bash
            run: |
              if [ ${{ steps.task_cloudflare_project_create_github.outputs.SUCCESS }} == 'true' ]; then
                echo ""
                echo "Project ${{ env.PROJECT_NAME }} linked to a Github account"
                echo ""
              elif [ ${{ steps.task_cloudflare_project_create_assets.outputs.SUCCESS }} == 'true' ]; then
                echo "========================================================================="
                echo ""
                echo " Project ${{ env.PROJECT_NAME }} NOT linked to a Github account."
                echo " Uploading assets to Cloudflare"
                echo ""
                echo "========================================================================="
                echo "If you wish to sync the assets from Github to Cloudflare, you must ensure"
                echo "you have connected your Github account to cloudflare and that you're"
                echo "uploading from the same account that is linked."
              else
                echo ""
                echo "Error occured creating ${{ env.PROJECT_NAME }}"
                echo ""
              fi

          # ---------------------------------------------------------------------------------------
          #   Job > Publish > Cloudflare Wrangler
          # ---------------------------------------------------------------------------------------

          #- name: "‚òÅÔ∏è CF ‚Ä∫ Publish KeeWeb.info"
          #  uses: cloudflare/wrangler-action@v3
          #  with:
          #    apiToken: ${{ secrets.CF_TOKEN }}                                   # Cloudflare API Token at https://dash.cloudflare.com/profile/api-tokens
          #    accountId: ${{ secrets.CF_ACCOUNT_ID }}                             # Cloudflare account ID available on right side of CF website
          #    workingDirectory: ${{ inputs.DIRECTORY_ROOT || './' }}              # Working directory
          #    command: pages deploy ${{ inputs.DIRECTORY_BUILD_OUTPUT || './' }} --project-name=${{ inputs.PROJECT_NAME || env.PROJECT_NAME }} --commit-dirty=true

          # ---------------------------------------------------------------------------------------
          #   Cloudflare Pages Action
          #
          #   a new version has been supplied above to switch from
          #   cloudflare/pages-action@v1 -> cloudflare/wrangler-action@v3
          #   the new action uses NodeJS 20, instead of 16.
          # ---------------------------------------------------------------------------------------

          - name: "‚òÅÔ∏è CF ‚Ä∫ Publish ${{ env.DOMAIN }}"
            uses: aetherinox/cloudflare-publish-action@latest
            with:
              apiToken: ${{ secrets.CF_TOKEN }}                                     # Cloudflare API Token at https://dash.cloudflare.com/profile/api-tokens
              accountId: ${{ secrets.CF_ACCOUNT_ID }}                               # Cloudflare account ID available on right side of CF website
              projectName: ${{ inputs.PROJECT_NAME || env.PROJECT_NAME }}           # Project name assigned at creation. view on workers-and-pages section of CF website
              directory: ${{ inputs.DIRECTORY_BUILD_OUTPUT || './' }}               # Output directory for built website
              gitHubToken: ${{ secrets.SELF_TOKEN_CL }}                             # Optional: Enable this if you want to have GitHub Deployments triggered
              branch: ${{ inputs.BRANCH || 'master' }}                              # Branch website published to; by default this will be the branch which triggered this workflow
              workingDirectory: ${{ inputs.DIRECTORY_ROOT || './' }}                # Working directory
              wranglerVersion: ${{ inputs.WRANGLER_VERSION || '3' }}                # Optional: Change the Wrangler version, allows you to point to a specific version or a tag such as `beta`
        
    # ---------------------------------------------------------------------------------------
    #   JOB > COMPLETE
    # ---------------------------------------------------------------------------------------

    job-complete:
        name: >-
          üÜó Successful Deployment
        needs: job-cfpublish
        env:
          UPLOAD_GITHUB: ${{ needs.job-cfpublish.outputs.upload_github }}
          UPLOAD_ASSETS: ${{ needs.job-cfpublish.outputs.upload_assets }}
        runs-on: ubuntu-latest
        steps:

          # ---------------------------------------------------------------------------------------
          #   Job > Complete > Get publish timestamp
          # ---------------------------------------------------------------------------------------

          - name: "üïõ Get Timestamp"
            id: task_complete_timestamp_get
            run: |
              echo "NOW=$(date +'%m-%d-%Y %H:%M:%S')" >> $GITHUB_ENV

          # ---------------------------------------------------------------------------------------
          #   Job > Complete > Summary of publish
          # ---------------------------------------------------------------------------------------

          - name: "üÜó CF Pages Deployment: ${{ env.NOW }}"
            id: task_complete_summary
            run: |
              echo ""
              echo ""
              echo "========================================================================="
              echo " Project ID: ............ ${{ env.PROJECT_NAME }}"
              echo " Domain: ................ ${{ env.DOMAIN }}"
              echo " Deploy Time: ........... ${{ env.NOW }}"
              if [ ${{ env.UPLOAD_GITHUB }} == 'true' ]; then
              echo " Link to Github:......... ‚úÖ"
              echo " Link to Assets:......... ‚ùå"
              elif [ ${{ env.UPLOAD_ASSETS }} == 'true' ]; then
              echo " Link to Github:......... ‚ùå"
              echo " Link to Assets:......... ‚úÖ"
              else
              echo " Link to Github:......... ‚ùå"
              echo " Link to Assets:......... ‚ùå"
              fi
